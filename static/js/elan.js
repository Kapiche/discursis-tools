// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(document).ready(function() {
    return $('#elan-file-select').change(function(e) {
      var file, reader;
      file = e.target.files[0];
      if (_.str.endsWith(file.name, ".eaf")) {
        reader = new FileReader();
        reader.onload = function() {
          var $xml, context, xmlDoc;
          xmlDoc = $.parseXML(reader.result);
          $xml = $(xmlDoc);
          context = {
            annotations: []
          };
          $xml.find('TIER').each(function() {
            if ($(this).children().length > 0) {
              return context.annotations.push({
                name: $(this).attr('TIER_ID')
              });
            }
          });
          $('#elan-output').html(Handlebars.templates.annotations(context));
          $('input:checkbox').on('click', function() {
            if ($('input:checked').length > 0) {
              return $('#elan-save-btn').removeAttr('disabled');
            } else {
              return $('#elan-save-btn').attr('disabled', '');
            }
          });
          return $('#elan-save-btn').click(function() {
            var $checked, $tier, annotation, annotations, annotations_time_index, blob, item, text_to_save, times, _i, _j, _len, _len1, _ref;
            $checked = $('input:checked');
            if ($checked.length < 1) {
              alert('You haven\'t selected any tiers!');
              return;
            }
            text_to_save = "ANNOTATION_ID,Tier,speaker,text,Onset,Offset,ref\n";
            times = {};
            annotations = {};
            annotations_time_index = [];
            $tier = $xml.find('TIME_SLOT').each(function() {
              var $slot;
              $slot = $(this);
              return times[$slot.attr('TIME_SLOT_ID')] = $slot.attr('TIME_VALUE');
            });
            $checked.each(function() {
              var $annotations, tier_name;
              tier_name = $(this).val();
              $tier = $xml.find('TIER[TIER_ID="' + tier_name + '"]');
              $annotations = $tier.find('ANNOTATION > ALIGNABLE_ANNOTATION');
              if ($annotations.length > 0) {
                return $annotations.each(function() {
                  var $annotation, id, index, time_end, time_start, value;
                  $annotation = $(this);
                  id = $annotation.attr('ANNOTATION_ID');
                  time_start = times[$annotation.attr('TIME_SLOT_REF1')];
                  if (time_start === '10400') {
                    console.log(id);
                  }
                  time_end = times[$annotation.attr('TIME_SLOT_REF2')];
                  value = $annotation.children('ANNOTATION_VALUE').text();
                  index = parseInt(time_start, 10);
                  if (annotations[index]) {
                    annotations[index].push(_.str.join(',', _.str.quote(id), _.str.quote(tier_name), _.str.quote(tier_name), _.str.quote(value.replace(/"/g, '""')), time_start, time_end, "\n"));
                  } else {
                    annotations[index] = [_.str.join(',', _.str.quote(id), _.str.quote(tier_name), _.str.quote(tier_name), _.str.quote(value.replace(/"/g, '""')), time_start, time_end, "\n")];
                  }
                  if (__indexOf.call(annotations_time_index, index) < 0) {
                    return annotations_time_index.push(index);
                  }
                });
              } else {
                return $annotations = $tier.find('ANNOTATION > REF_ANNOTATION').each(function() {
                  var $annotation, $ref_annotation, id, index, ref_id, time_end, time_start, value;
                  $annotation = $(this);
                  id = $annotation.attr('ANNOTATION_ID');
                  ref_id = $annotation.attr('ANNOTATION_REF');
                  value = $annotation.children('ANNOTATION_VALUE').text();
                  $ref_annotation = $xml.find('ALIGNABLE_ANNOTATION[ANNOTATION_ID="' + ref_id + '"]');
                  time_start = times[$ref_annotation.attr('TIME_SLOT_REF1')];
                  time_end = times[$ref_annotation.attr('TIME_SLOT_REF2')];
                  index = parseInt(time_start, 10);
                  if (annotations[index]) {
                    annotations[index].push(_.str.join(',', _.str.quote(id), _.str.quote(tier_name), _.str.quote(tier_name), _.str.quote(value.replace(/"/g, '""')), time_start, time_end, _.str.quote(ref_id) + "\n"));
                  } else {
                    annotations[index] = [_.str.join(',', _.str.quote(id), _.str.quote(tier_name), _.str.quote(tier_name), _.str.quote(value.replace(/"/g, '""')), time_start, time_end, _.str.quote(ref_id) + "\n")];
                  }
                  if (__indexOf.call(annotations_time_index, index) < 0) {
                    return annotations_time_index.push(index);
                  }
                });
              }
            });
            annotations_time_index.sort(function(a, b) {
              return a - b;
            });
            for (_i = 0, _len = annotations_time_index.length; _i < _len; _i++) {
              item = annotations_time_index[_i];
              _ref = annotations[item];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                annotation = _ref[_j];
                text_to_save += annotation;
              }
            }
            blob = new Blob([text_to_save], {
              type: "text/csv;charset=utf-8"
            });
            return saveAs(blob, _.str.rtrim(file.name, ".eaf") + ".csv");
          });
        };
        return reader.readAsText(file);
      } else {
        return alert('That doesn\'t appear to be an EAF file.\n\nPlease choose a file that ends with ".eaf".');
      }
    });
  });

}).call(this);

/*
//@ sourceMappingURL=elan.map
*/
